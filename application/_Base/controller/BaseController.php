<?php

namespace app\_Base\controller;


use app\common\model\SSUser;
use app\common\model\Users;
use Firebase\JWT\JWT;
use think\Controller;
use think\facade\Cookie;

class BaseController extends Controller
{
    protected $token; //当前请求的发来的token String
    protected $user; //当前请求的用户[Object]信息,已隐藏password
    protected $key = "SANSHENGIT";
    protected $tokenTime;//当前请求的token有效期 int
    protected $deveice;//当前请求的设置
    protected $expirationTime = 60 * 60 * 24 * 365;//过期时间



    public function __debugInfo()
    {
        $this->token = null;
        $this->tokenTime = null;
        $this->user = null;
        return parent::__debugInfo(); // TODO: Change the autogenerated stub
    }



    /**
     * 创建 token
     * @param array $data 必填 自定义参数数组
     * @param integer $exp_time 必填 token过期时间 单位:秒 例子：7200=2小时
     * @param string $scopes 选填 token标识，请求接口的token
     * @return
     *
     * Authority::签发者
     * Receiver::接收者
     * CreateTime:: 创建时间
     * UseTime:: 使用时间
     * ExpirationTime:: 过期时间
     * DeveiceType:: 请求设置类型
     * data::
     *
     */
    function createToken($data = "")
    {

        //JWT标准规定的声明，但不是必须填写的；
        //iss: jwt签发者
        //sub: jwt所面向的用户
        //aud: 接收jwt的一方
        //exp: jwt的过期时间，过期时间必须要大于签发时间
        //nbf: 定义在什么时间之前，某个时间点后才能访问
        //iat: jwt的签发时间
        //jti: jwt的唯一身份标识，主要用来作为一次性token。
        //公用信息

        $time = time(); //当前时间
        $auth['authority'] = $this->key; //签发者 可选
        $auth['receiver'] = ''; //接收该JWT的一方，可选
        $auth['createTime'] = $time; //签发时间
        $auth['useTime'] = $time; //(Not Before)：某个时间点后才能访问，比如设置time+3
        $auth['deveiceType'] = $this->deveice; //请求token的设备
        $auth['expirationTime'] = $time + $this->expirationTime; //token过期时间,这里设置7天
        $auth['data'] = $data; //自定义参数
        $token = JWT::encode($auth, $this->key);
        //Header("HTTP/1.1 201 Created");
        return $token;
    }

    function isTokenValid() {
        if (!$this->token) {
            return SBResponse::response("", 201, "缺少token");
        }
    }

    function getRegistrationID($uid) {
        $_user = Users::where(["id"=>$uid])->find();
        return $_user->registration_id ? $_user->registration_id : "";
    }




}
